{"version":3,"sources":["assets/Instagram-Logo.wine.svg","assets/nameless.png","styles/colorsTheme.js","functionality/SeedAndMint.js","components/ComponentsBox.js","components/OwnedNFTs.js","App.js","index.js","components/TokenCard.js","functionality/RLEtoSVG.js"],"names":["theme","createTheme","palette","primary","main","secondary","RLEtoSVG","require","default","mintNFT","nftSeeder","nftDescriptor","account","console","log","generateSeed","address","seeds","wholeSeed","getSkin","skin","getSkinPalette","skinPalette","getHead","head","getHeadPalette","headPalette","getJacket","jacket","getJacketPalette","jacketPalette","mySeed","url","makeAnEpicNFT","txn","wait","CONTRACT_DESCRIPTOR_ADDRESS","Item","styled","Paper","backgroundColor","padding","spacing","textAlign","color","fontFamily","ComponentsBox","useState","setHeadPalette","setSkinPalette","setJacketPalette","setHead","setSkin","setJacket","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","connectedDescriptorContract","Contract","NYCDescriptor","abi","skinPaletteCount","toNumber","jacketPaletteCount","headPaletteCount","skinCount","jacketCount","headCount","getColorCounts","Box","sx","width","Grid","container","rowSpacing","columnSpacing","xs","sm","md","item","fontSize","marginBottom","toReturn","accountBalance","tokenString","request","method","accounts","balanceOf","i","tokenOfOwnerByIndex","ownedTokenID","tokenURI","ownedToken","OwnedNFTs","balance","setBalance","tokens","setTokens","ownedTokenURIs","then","res","Stack","TokenCard","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","myAlert","setAlert","loading","setLoading","checkIfWalletIsConnected","chainId","length","alert","setupEventListener","connectWallet","on","from","tokenId","Alert","onClose","severity","error","askContractToMintNft","connectedSeederContract","NYCSeeder","catch","err","useEffect","ThemeProvider","className","alt","src","namelesslogo","onClick","LinearProgress","instalogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById","tokenCard","props","substring","split","finalTokens","forEach","token","tokenID","json","Buffer","toString","image","JSON","parse","openseaURL","goerliURL","html","maxWidth","borderColor","component","height","justifyContent","variant","marginRight","push","writeSVG","seed","filename","finalURL","svgTxt","createRects","data","location","hostname","fetch","mode","headers","body","stringify","pinata","componentPalette","yStart","BigNumber","xStart","xEnd","totalWidthBlocks","Math","ceil","currBlockCount","currX","currY","line","config"],"mappings":"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","file":"static/js/main.14a4dc8c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Instagram-Logo.wine.22bda4c2.svg\";","export default __webpack_public_path__ + \"static/media/nameless.fc3c7d9d.png\";","import { createTheme } from '@mui/material/styles';\n\n\nconst theme = createTheme({\n    palette: {\n      primary: {\n        main: '#EFEF85',\n      },\n      secondary: {\n        main: '#ff7961',\n      },\n    },\n  });\n\n\nexport default theme;","const RLEtoSVG = require('./RLEtoSVG').default;\n\n\nexport const mintNFT = async (nftSeeder, nftDescriptor, account) => {\n    console.log(\"in mintNFT code\")\n    await nftSeeder.generateSeed(nftDescriptor.address);\n    const wholeSeed = await nftSeeder.seeds(account);\n    const skin = await nftDescriptor.getSkin(wholeSeed.skin)\n    const skinPalette = await nftDescriptor.getSkinPalette(wholeSeed.skinPalette)\n    const head = await nftDescriptor.getHead(wholeSeed.head)\n    const headPalette = await nftDescriptor.getHeadPalette(wholeSeed.headPalette)\n    const jacket = await nftDescriptor.getJacket(wholeSeed.jacket)\n    const jacketPalette = await nftDescriptor.getJacketPalette(wholeSeed.jacketPalette)\n\n    const mySeed = {\n    skin: skin, \n    skinPalette: skinPalette,\n    jacket: jacket,\n    jacketPalette: jacketPalette,\n    head: head,\n    headPalette: headPalette\n    }\n    \n    const url = await RLEtoSVG(mySeed);   \n    const txn = await nftDescriptor.makeAnEpicNFT(wholeSeed, url)\n    await txn.wait()\n    console.log(\"completed mint\")\n}\n\n\nexport default mintNFT"," import { ethers } from \"ethers\";\nimport NYCDescriptor from '../utils/NYCDescriptor.json';\nimport React, { useState } from \"react\";\n\n//import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\n\n\nconst CONTRACT_DESCRIPTOR_ADDRESS = \"0x8Bc3345e219ef14d1137435ded9f6c454F8136Af\";\n\nconst Item = styled(Paper)(({ theme }) => ({\n  backgroundColor: \"#000000\",\n  padding: theme.spacing(1),\n  textAlign: 'center',\n  color: '#EFEF85',\n  fontFamily: \"myfont\"\n}));\n\n\nconst ComponentsBox = () => {\n\n  const [headPalette, setHeadPalette] = useState(\"\");\n  const [skinPalette, setSkinPalette] = useState(\"\");\n  const [jacketPalette, setJacketPalette] = useState(\"\");\n\n  const [head, setHead] = useState(\"\");\n  const [skin, setSkin] = useState(\"\");\n  const [jacket, setJacket] = useState(\"\");\n\n  async function getColorCounts() {\n    const { ethereum } = window;\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const connectedDescriptorContract = new ethers.Contract(CONTRACT_DESCRIPTOR_ADDRESS, NYCDescriptor.abi, signer)\n\n      const skinPaletteCount = await connectedDescriptorContract.skinPaletteCount()\n      setSkinPalette(skinPaletteCount.toNumber())\n      const jacketPaletteCount = await connectedDescriptorContract.jacketPaletteCount()\n      setJacketPalette(jacketPaletteCount.toNumber())\n      const headPaletteCount = await connectedDescriptorContract.headPaletteCount()\n      setHeadPalette(headPaletteCount.toNumber())\n\n      const skinCount = await connectedDescriptorContract.skinCount()\n      setSkin(skinCount.toNumber())\n      const jacketCount = await connectedDescriptorContract.jacketCount()\n      setJacket(jacketCount.toNumber())\n      const headCount = await connectedDescriptorContract.headCount()\n      setHead(headCount.toNumber())\n    }\n  } \n\n  getColorCounts()\n\n  return (\n    <Box sx = {{width: '25%'}}>\n      \n      <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>\n        <Grid item xs={6}>\n        <Item>Head Types: {head}</Item>\n        </Grid>\n        <Grid item xs={6}>\n        <Item>Head Colors: {headPalette}</Item>\n        </Grid>\n        <Grid item xs={6}>\n        <Item>Jacket Types: {jacket}</Item>\n        </Grid>\n        <Grid item xs={6}>\n        <Item>Jacket Colors: {jacketPalette}</Item>\n        </Grid>\n        <Grid item xs={6}>\n        <Item>Skin Types: {skin}</Item>\n        </Grid>\n        <Grid item xs={6}>\n        <Item>Skin Colors: {skinPalette} </Item>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default ComponentsBox;","import { ethers } from \"ethers\";\nimport NYCDescriptor from '../utils/NYCDescriptor.json';\nimport React, { useState } from \"react\";\n\n//import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport Stack from '@mui/material/Stack';\nimport TokenCard from './TokenCard'\n\nconst CONTRACT_DESCRIPTOR_ADDRESS = \"0x8Bc3345e219ef14d1137435ded9f6c454F8136Af\";\n\nconst Item = styled(Paper)(({ theme }) => ({\n  backgroundColor: \"#000000\",\n  padding: theme.spacing(1),\n  textAlign: 'center',\n  color: '#FD593D',\n  fontSize: '25px',\n  fontFamily: \"myfont\",\n  marginBottom: 20\n}));\n\nasync function ownedTokenURIs() { \n  const { ethereum } = window;\n  const toReturn = {\n    \"balance\" : null, \n    \"tokens\" : null\n  }\n  let accountBalance = \"\"\n  let tokenString = \"\"\n  if (ethereum) {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n    const account = accounts[0]\n\n    const connectedDescriptorContract = new ethers.Contract(CONTRACT_DESCRIPTOR_ADDRESS, NYCDescriptor.abi, signer)\n    accountBalance = await connectedDescriptorContract.balanceOf(account);\n    accountBalance = accountBalance.toNumber()\n\n  for (let i = 0; i < accountBalance; i ++) {\n    const ownedTokenID = await connectedDescriptorContract.tokenOfOwnerByIndex(account, i)\n    const ownedToken = await connectedDescriptorContract.tokenURI(ownedTokenID)\n    tokenString += ownedTokenID + \"-\" + ownedToken + \"+\";\n    \n  }\n  }\n  toReturn[\"tokens\"] = tokenString\n  toReturn[\"balance\"] = accountBalance\n  return toReturn\n}\n\nconst OwnedNFTs = () => {\n\n  const [balance, setBalance] = useState(\"\");\n  const [tokens, setTokens] = useState(\"\")\n\n  ownedTokenURIs().then(res => {\n    setBalance(res.balance)\n    setTokens(res.tokens)\n  })\n  return (\n    <Box sx = {{width: '60%'}}>\n      <Stack spacing={2}>\n        <Item> NFTs owned by you: {balance} </Item>\n      </Stack>\n      {tokens === \"\" ? <></> : <TokenCard tokenURI = {tokens} /> } \n      \n    </Box>\n  );\n};\n\nexport default OwnedNFTs;","import './styles/App.css';\nimport instalogo from './assets/Instagram-Logo.wine.svg'\nimport namelesslogo from './assets/nameless.png'\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport NYCDescriptor from './utils/NYCDescriptor.json';\nimport NYCSeeder from './utils/NYCSeeder.json';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport theme from './styles/colorsTheme'\nimport { ThemeProvider } from '@mui/material/styles';\nimport Alert from '@mui/material/Alert';\nimport {mintNFT} from './functionality/SeedAndMint';\nimport Grid from './components/ComponentsBox';\nimport OwnedNFTs from './components/OwnedNFTs';\n\nconst TWITTER_HANDLE = 'namelessyouthclub';\nconst TWITTER_LINK = `https://instagram.com/${TWITTER_HANDLE}`;\n// const OPENSEA_LINK = '';\n// const TOTAL_MINT_COUNT = 50;\n\n// I moved the contract address to the top for easy access.\nconst CONTRACT_SEEDER_ADDRESS = \"0xb0060BB6144D7029866b746bc2D35C382C98e75d\";\nconst CONTRACT_DESCRIPTOR_ADDRESS = \"0x8Bc3345e219ef14d1137435ded9f6c454F8136Af\";\n\nconst App = () => {\n\n    const [currentAccount, setCurrentAccount] = useState(\"\");\n    const [myAlert, setAlert] = useState()\n    const [loading, setLoading] = useState(false);\n    \n    const checkIfWalletIsConnected = async () => {\n      const { ethereum } = window;\n      if (!ethereum) {\n          console.log(\"Make sure you have metamask!\");\n          return;\n      } else {\n          //console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n      let chainId = await ethereum.request({ method: 'eth_chainId' });\n      const rinkebyChainId = \"0x4\"; \n      const goerliChainId = \"0x5\"\n\n      if (accounts.length !== 0) {\n          const account = accounts[0];\n          //console.log(\"Found an authorized account:\", account);\n          if (chainId !== goerliChainId) {\n            alert(\"You are not connected to the Goerli Test Network!\");\n          }\n          else {\n            setCurrentAccount(account)\n            setupEventListener()\n          }\n\t\t\t\t\t\n      } else {\n          console.log(\"No authorized account found\")\n      }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n      setupEventListener() \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedDescriptorContract = new ethers.Contract(CONTRACT_DESCRIPTOR_ADDRESS, NYCDescriptor.abi, signer)\n\n       // event if minted is completed\n        connectedDescriptorContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          //console.log(from, tokenId.toNumber())\n          setLoading(false)\n          //alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_DESCRIPTOR_ADDRESS}/${tokenId.toNumber()}`)\n          setAlert(<Alert onClose={() => {setAlert(\"\")}} severity=\"success\">NFT minted — check it out:  https://testnets.opensea.io/assets/goerli/{CONTRACT_DESCRIPTOR_ADDRESS}/{tokenId.toNumber()}</Alert>)\n        });\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const askContractToMintNft = async () => {\n    // try {\n      const { ethereum } = window;\n      setLoading(true)\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        console.log(signer)\n        const connectedSeederContract = new ethers.Contract(CONTRACT_SEEDER_ADDRESS, NYCSeeder.abi, signer);\n        const connectedDescriptorContract = new ethers.Contract(CONTRACT_DESCRIPTOR_ADDRESS, NYCDescriptor.abi, signer)\n\n        await mintNFT(connectedSeederContract, connectedDescriptorContract, currentAccount)\n            .catch((err)=>{\n              console.log(err)\n              setLoading(false);\n              setAlert(<Alert onClose={() => {setAlert(\"\")}} severity=\"error\">\n                        <strong>Error: </strong>Transaction Rejected\n                      </Alert>)\n              })\n        \n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n  }\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  function isLoading() {\n    const isLoading = loading;\n    if (isLoading) {\n      return <ThemeProvider theme={theme} ><div className='center'> <LinearProgress className = \"spinner\" color= \"primary\" />  </div></ThemeProvider>\n    }\n    return <button onClick={askContractToMintNft} className=\"cta-button mint-button\">\n         Mint NFT\n       </button> ;\n  }\n  \n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <div className = \"alert\">{myAlert}</div>\n        <div className=\"container\">\n        \n          <div className=\"header-container\">\n            <img alt = \"nameless-logo\" src = {namelesslogo} />\n            <h1 className=\"sub-text\">ideas unmasked</h1>\n            {currentAccount === \"\" ? renderNotConnectedContainer() : isLoading()}\n          </div>\n          <div className='components-container'>\n          {currentAccount === \"\" ? <></> : <Grid />  }\n          </div>\n          <div className = 'components-container'>\n          {currentAccount === \"\" ? <></> : <OwnedNFTs />  }\n          </div>\n          <div className=\"footer-container\">\n            <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={instalogo} />\n            <a\n              className=\"footer-text\"\n              href={TWITTER_LINK}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >{`@${TWITTER_HANDLE}`}</a>\n          </div>\n        </div>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","//import { ethers } from \"ethers\";\n//import NYCDescriptor from '../utils/NYCDescriptor.json';\n//import React, { useState } from \"react\";\n\n//import * as React from 'react';\n\n\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\n\n\nconst CONTRACT_DESCRIPTOR_ADDRESS = \"0x8Bc3345e219ef14d1137435ded9f6c454F8136Af\";\n\n\nconst tokenCard = (props) => {\n    const tokenURI = props.tokenURI.substring(0, props.tokenURI.length - 1)\n    const tokens = tokenURI.split(\"+\")\n    console.log(tokens)\n\n    const finalTokens = []\n    tokens.forEach((token) => {\n        const tokenID = token[0]\n        const json = Buffer.from(token.substring(31), \"base64\").toString()\n        const result = JSON.parse(json);\n        const hash = result.image.substring(7)\n        const image = \"https://cloudflare-ipfs.com/ipfs/\" + hash \n        const openseaURL = \"https://testnets.opensea.io/assets/goerli/\" + CONTRACT_DESCRIPTOR_ADDRESS + \"/\" + tokenID\n        const goerliURL = \"https://goerli.etherscan.io/token/0x8bc3345e219ef14d1137435ded9f6c454f8136af?a=\" + tokenID\n        const html = <Card sx={{ maxWidth: 350, borderColor: 'black' }} className = \"my-card\">\n                <CardMedia\n                component=\"img\"\n                height=\"500\"\n                image={image}\n                alt=\"NFT image\"\n                />\n                <CardContent className = \"card-content\">\n                {/* <Typography gutterBottom variant=\"h5\" className='sub-text'>\n                    Token Name: {result.name}\n                </Typography> */}\n                <div  className='card-text' >\n                    Token ID: {tokenID}\n                </div>\n                {/* <Typography variant=\"body2\" color=\"text.secondary\" className = \"sub-text\">\n                    {result.description}\n                </Typography> */}\n                </CardContent>\n                <CardActions className = \"card-content\" sx={{justifyContent: 'center'}}>\n                <Button variant=\"contained\"  sx = {{marginRight: 1}}className = \"card-button\" href = {openseaURL} target=\"_blank\"><div className='button-text'>Opensea</div></Button>\n                <Button variant=\"contained\"  className = \"card-button\" href= {goerliURL} target=\"_blank\"><div className = 'button-text'>Etherscan</div></Button>\n                </CardActions>\n            </Card>\n        finalTokens.push(html)\n    })\n\n    return (<Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }} sx={{justifyContent: 'center'}}>{finalTokens}</Grid>)\n}\n\nexport default tokenCard;","import { ethers } from \"ethers\";\n\nrequire('dotenv').config()\n\nasync function writeSVG(seed) {\n    const header = '<svg width=\"780\" height=\"1040\" viewbox =\"0,0,780,1040\" xmlns=\"http://www.w3.org/2000/svg\" shape-rendering=\"crispEdges\">\\n<rect width = \"780\" height = \"1040\" fill = \"#000000\"/>'\n    const filename = \"./imageSVG.svg\"\n    //const filename = path.normalize(__dirname + \"/svgText.svg\")\n    let finalURL = \"\"\n    let svgTxt = \"\"\n    svgTxt += header\n\n    svgTxt += await createRects(seed.skin, seed.skinPalette, filename)\n    svgTxt += await createRects(seed.jacket, seed.jacketPalette, filename)\n    svgTxt += await createRects(seed.head, seed.headPalette, filename)\n    svgTxt += \"</svg>\"\n\n    const data = {\n        \"data\" : svgTxt\n    }\n\n    let url = \"\"\n    if (window.location.hostname === \"localhost\")\n        url = \"http://localhost:3001/handle\"\n    else\n        url = \"https://nyc-splash-page.herokuapp.com/handle\"\n        \n    await fetch(url, {\n          method: 'POST',\n          mode: 'cors',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: (JSON.stringify(data))\n    }).then(res => \n        res.json()).then(json => finalURL = json.pinata)\n    return finalURL\n}\n\nasync function createRects(component, componentPalette, filename) {\n    let svgTxt = \"\"\n    let yStart = ethers.BigNumber.from(component[0]).toNumber()\n    let xStart = ethers.BigNumber.from(component[3]).toNumber()\n    let xEnd = ethers.BigNumber.from(component[1]).toNumber()\n    let totalWidth = xEnd - xStart  //480 24 wide    \n    let totalWidthBlocks = totalWidth / 20\n    totalWidthBlocks = Math.ceil(totalWidthBlocks)\n    let currBlockCount = 0\n    let currX = xStart\n    let currY = yStart\n    for (let i = 4; i < component[\"length\"] - 2; i += 2) {\n         let length =  ethers.BigNumber.from(component[i]).toNumber()\n         let color = componentPalette[component[i + 1]]\n         let testX = currBlockCount + length\n\n        if (testX <= totalWidthBlocks) {\n            const line = '<rect width=\"'+ (20 * length)+'\" height= \"' + (20) +'\" x=\"' + (currX)+ '\" y=\"'+ (currY)+ '\" fill=\"'+ color +'\"/>\\n'\n            currX += length * 20\n            currBlockCount += length\n\n            svgTxt += line\n        }\n        else {\n            currY += 20\n            currX = xStart\n            const line = '\\n\\n<rect width=\"'+ (20* length)+'\" height= \"' + (20) +'\" x=\"' + (currX)+ '\" y=\"'+ (currY)+ '\" fill=\"'+ color +'\"/>\\n'\n            currX += length * 20\n            currBlockCount = length ;\n            svgTxt += line\n        }\n    }\n    return svgTxt\n}\n\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default async function (seed) { \n    return await writeSVG(seed);\n};"],"sourceRoot":""}