{"version":3,"sources":["assets/Instagram-Logo.wine.svg","assets/nameless.png","styles/colorsTheme.js","functionality/SeedAndMint.js","components/ComponentsBox.js","App.js","index.js","functionality/RLEtoSVG.js"],"names":["theme","createTheme","palette","primary","main","secondary","RLEtoSVG","require","default","mintNFT","nftSeeder","nftDescriptor","account","console","log","generateSeed","address","seeds","wholeSeed","getSkin","skin","getSkinPalette","skinPalette","getHead","head","getHeadPalette","headPalette","getJacket","jacket","getJacketPalette","jacketPalette","mySeed","url","makeAnEpicNFT","txn","wait","CONTRACT_DESCRIPTOR_ADDRESS","Item","styled","Paper","backgroundColor","padding","spacing","textAlign","color","fontFamily","ComponentsBox","useState","setHead","setSkin","setJacket","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","connectedDescriptorContract","Contract","NYCDescriptor","abi","skinPaletteCount","skinCount","toNumber","jacketPaletteCount","jacketCount","headPaletteCount","headCount","getColorCounts","Box","sx","width","Stack","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","myAlert","setAlert","loading","setLoading","checkIfWalletIsConnected","request","method","accounts","chainId","length","alert","setupEventListener","connectWallet","on","from","tokenId","Alert","onClose","severity","error","askContractToMintNft","connectedSeederContract","NYCSeeder","catch","err","useEffect","ThemeProvider","className","alt","src","namelesslogo","onClick","LinearProgress","instalogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById","writeSVG","seed","filename","finalURL","svgTxt","createRects","data","location","hostname","fetch","mode","headers","body","JSON","stringify","then","res","json","pinata","component","componentPalette","yStart","BigNumber","xStart","xEnd","totalWidthBlocks","Math","ceil","currBlockCount","currX","currY","i","line","config"],"mappings":"mLAAe,G,MAAA,IAA0B,iDCA1B,MAA0B,qC,yCCe1BA,EAZDC,YAAY,CACtBC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,c,kBCTRE,EAAWC,EAAQ,IAAcC,QAG1BC,EAAO,iDAAG,WAAOC,EAAWC,EAAeC,GAAjC,0GACnBC,QAAQC,IAAI,mBADO,SAEbJ,EAAUK,aAAaJ,EAAcK,SAFxB,uBAGKN,EAAUO,MAAML,GAHrB,cAGbM,EAHa,gBAIAP,EAAcQ,QAAQD,EAAUE,MAJhC,cAIbA,EAJa,iBAKOT,EAAcU,eAAeH,EAAUI,aAL9C,eAKbA,EALa,iBAMAX,EAAcY,QAAQL,EAAUM,MANhC,eAMbA,EANa,iBAOOb,EAAcc,eAAeP,EAAUQ,aAP9C,eAObA,EAPa,iBAQEf,EAAcgB,UAAUT,EAAUU,QARpC,eAQbA,EARa,iBASSjB,EAAckB,iBAAiBX,EAAUY,eATlD,eASbA,EATa,OAWbC,EAAS,CACfX,KAAMA,EACNE,YAAaA,EACbM,OAAQA,EACRE,cAAeA,EACfN,KAAMA,EACNE,YAAaA,GAjBM,UAoBDpB,EAASyB,GApBR,eAoBbC,EApBa,iBAsBDrB,EAAcsB,cAAcf,EAAWc,GAtBtC,eAsBbE,EAtBa,iBAuBbA,EAAIC,OAvBS,QAwBnBtB,QAAQC,IAAI,kBAxBO,4CAAH,0D,0CCMdsB,EAA8B,6CAC9BC,EAAOC,YAAOC,IAAPD,EAAc,kBAAgB,CACzCE,gBAAiB,UACjBC,QAFyB,EAAGzC,MAEb0C,QAAQ,GACvBC,UAAW,SACXC,MAAO,UACPC,WAAY,SALa,IA0CZC,EAlCO,WAEpB,MAAwBC,mBAAS,IAAjC,mBAAOvB,EAAP,KAAawB,EAAb,KACA,EAAwBD,mBAAS,IAAjC,mBAAO3B,EAAP,KAAa6B,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOnB,EAAP,KAAesB,EAAf,KAJ0B,sDAM1B,iHACuBC,SAAbC,EADV,EACUA,UADV,wBAGUC,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAC7CK,EAASJ,EAASK,YAClBC,EAA8B,IAAIL,IAAOM,SAASxB,EAA6ByB,EAAcC,IAAKL,GAL5G,SAM4BE,EAA4BI,mBANxD,cAMUC,EANV,OAOIf,EAAQe,EAAUC,YAPtB,UAQ8BN,EAA4BO,qBAR1D,eAQUC,EARV,OASIjB,EAAUiB,EAAYF,YAT1B,UAU4BN,EAA4BS,mBAVxD,QAUUC,EAVV,OAWIrB,EAAQqB,EAAUJ,YAXtB,6CAN0B,sBAuB1B,OAvB0B,mCAqB1BK,GAGE,cAACC,EAAA,EAAD,CAAKC,GAAM,CAACC,MAAO,OAAnB,SACE,eAACC,EAAA,EAAD,CAAOhC,QAAS,EAAhB,UACE,eAACL,EAAD,2BAAoBb,KACpB,eAACa,EAAD,6BAAsBT,KACtB,eAACS,EAAD,2BAAoBjB,EAApB,WAIP,ECnCKuD,EAAiB,oBACjBC,EAAY,gCAA4BD,GAMxCvC,EAA8B,6CAgKrByC,EA9JH,WAER,MAA4C9B,mBAAS,IAArD,mBAAO+B,EAAP,KAAuBC,EAAvB,KACA,EAA4BhC,qBAA5B,mBAAOiC,EAAP,KAAgBC,EAAhB,KACA,EAA8BlC,oBAAS,GAAvC,mBAAOmC,EAAP,KAAgBC,EAAhB,KAEMC,EAAwB,iDAAG,2GACVjC,OAAbC,EADuB,EACvBA,SADuB,uBAG3BvC,QAAQC,IAAI,gCAHe,0BAM3BD,QAAQC,IAAI,8BAA+BsC,GANhB,uBASRA,EAASiC,QAAQ,CAAEC,OAAQ,iBATnB,cASzBC,EATyB,iBAUXnC,EAASiC,QAAQ,CAAEC,OAAQ,gBAVhB,QAU3BE,EAV2B,OAWR,MAEC,IAApBD,EAASE,QACH7E,EAAU2E,EAAS,GACzB1E,QAAQC,IAAI,+BAAgCF,GAJzB,QAKf4E,EACFE,MAAM,uDAGNX,EAAkBnE,GAClB+E,MAIF9E,QAAQC,IAAI,+BAzBe,4CAAH,qDA6B1B8E,EAAa,iDAAG,gHAEGzC,OAAbC,EAFU,EAEVA,SAFU,uBAKhBsC,MAAM,iBALU,0CASKtC,EAASiC,QAAQ,CAAEC,OAAQ,wBAThC,OASZC,EATY,OAWlB1E,QAAQC,IAAI,YAAayE,EAAS,IAClCR,EAAkBQ,EAAS,IAE3BI,IAdkB,kDAgBlB9E,QAAQC,IAAR,MAhBkB,0DAAH,qDAqBb6E,EAAkB,iDAAG,oGAEzB,IAAK,EACkBxC,QAAbC,EADN,EACMA,WAIAC,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAC7CK,EAASJ,EAASK,YACY,IAAIJ,IAAOM,SAASxB,EAA6ByB,EAAcC,IAAKL,GAG5EoC,GAAG,oBAAoB,SAACC,EAAMC,GACxDlF,QAAQC,IAAIgF,EAAMC,EAAQ9B,YAC1BkB,GAAW,GAEXF,EAAS,eAACe,EAAA,EAAD,CAAOC,QAAS,WAAOhB,EAAS,GAAI,EAAEiB,SAAS,UAA/C,iFAAyH9D,EAAzH,IAAuJ2D,EAAQ9B,cACzK,KAGDpD,QAAQC,IAAI,iCAIf,CAFC,MAAOqF,GACPtF,QAAQC,IAAIqF,EACb,CAxBwB,2CAAH,qDA2BlBC,EAAoB,iDAAG,6GAEJjD,OAAbC,EAFiB,EAEjBA,SACR+B,GAAW,IAEP/B,EALqB,wBAMjBC,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAC7CK,EAASJ,EAASK,YACxB7C,QAAQC,IAAI2C,GACN4C,EAA0B,IAAI/C,IAAOM,SA/FnB,6CA+FqD0C,EAAUxC,IAAKL,GACtFE,EAA8B,IAAIL,IAAOM,SAASxB,EAA6ByB,EAAcC,IAAKL,GAVjF,UAYjBhD,EAAQ4F,EAAyB1C,EAA6BmB,GAC/DyB,OAAM,SAACC,GACN3F,QAAQC,IAAI0F,GACZrB,GAAW,GACXF,EAAS,eAACe,EAAA,EAAD,CAAOC,QAAS,WAAOhB,EAAS,GAAI,EAAEiB,SAAS,QAA/C,UACC,6CADD,0BAGR,IAnBgB,gCAsBvBrF,QAAQC,IAAI,kCAtBW,4CAAH,qDA0B1B2F,qBAAU,WACRrB,GACD,GAAE,IAkBH,OACE,cAACsB,EAAA,EAAD,CAAe1G,MAAOA,EAAtB,SACE,sBAAK2G,UAAU,MAAf,UACE,qBAAKA,UAAY,QAAjB,SAA0B3B,IAC1B,sBAAK2B,UAAU,YAAf,UAEE,sBAAKA,UAAU,mBAAf,UACE,qBAAKC,IAAM,gBAAgBC,IAAOC,IAClC,oBAAIH,UAAU,WAAd,4BACoB,KAAnB7B,EAxBT,wBAAQiC,QAASnB,EAAee,UAAU,mCAA1C,+BAMkBzB,EAET,cAACwB,EAAA,EAAD,CAAe1G,MAAOA,EAAtB,SAA8B,sBAAK2G,UAAU,SAAf,cAAyB,cAACK,EAAA,EAAD,CAAgBL,UAAY,UAAU/D,MAAO,YAAtE,UAEhC,wBAAQmE,QAASX,EAAsBO,UAAU,yBAAjD,yBAgBD,qBAAKA,UAAU,uBAAf,SACoB,KAAnB7B,EAAwB,6BAAQ,cAAC,EAAD,MAEjC,sBAAK6B,UAAU,mBAAf,UACE,qBAAKC,IAAI,eAAeD,UAAU,eAAeE,IAAKI,IACtD,mBACEN,UAAU,cACVO,KAAMtC,EACNuC,OAAO,SACPC,IAAI,aAJN,oBAKMzC,eAMjB,EC/KD0C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,Q,ygiHCLXC,E,wFAAf,WAAwBC,GAAxB,+FACmB,kLACTC,EAAW,iBAEbC,EAAW,GACXC,EAAS,GACbA,GALe,kLADnB,KAQIA,EARJ,SAQoBC,EAAYJ,EAAKvG,KAAMuG,EAAKrG,YAAasG,GAR7D,cAQIE,EARJ,kBASIA,EATJ,UASoBC,EAAYJ,EAAK/F,OAAQ+F,EAAK7F,cAAe8F,GATjE,eASIE,EATJ,kBAUIA,EAVJ,UAUoBC,EAAYJ,EAAKnG,KAAMmG,EAAKjG,YAAakG,GAV7D,eAUIE,EAVJ,aAaUE,EAAO,CACT,KAHJF,GAAU,UAMN9F,EAAM,GAENA,EAD6B,cAA7BmB,OAAO8E,SAASC,SACV,+BAEA,+CArBd,UAuBUC,MAAMnG,EAAK,CACXsD,OAAQ,OACR8C,KAAM,OACNC,QAAS,CACP,eAAgB,oBAElBC,KAAOC,KAAKC,UAAUR,KACzBS,MAAK,SAAAC,GAAG,OACPA,EAAIC,MADG,IACKF,MAAK,SAAAE,GAAI,OAAId,EAAWc,EAAKC,MAApB,IA/B7B,iCAgCWf,GAhCX,6C,+BAmCeE,E,4FAAf,WAA2Bc,EAAWC,EAAkBlB,GAAxD,yGAWI,IAVIE,EAAS,GACTiB,EAASzF,IAAO0F,UAAUlD,KAAK+C,EAAU,IAAI5E,WAC7CgF,EAAS3F,IAAO0F,UAAUlD,KAAK+C,EAAU,IAAI5E,WAC7CiF,EAAO5F,IAAO0F,UAAUlD,KAAK+C,EAAU,IAAI5E,WAE3CkF,GADaD,EAAOD,GACY,GACpCE,EAAmBC,KAAKC,KAAKF,GACzBG,EAAiB,EACjBC,EAAQN,EACRO,EAAQT,EACHU,EAAI,EAAGA,EAAIZ,EAAS,OAAa,EAAGY,GAAK,EACzChE,EAAUnC,IAAO0F,UAAUlD,KAAK+C,EAAUY,IAAIxF,WAC9CrB,EAAQkG,EAAiBD,EAAUY,EAAI,IAC/BH,EAAiB7D,GAEjB0D,GACHO,EAAO,gBAAkB,GAAKjE,EAAvB,qBAAgE8D,EAAQ,QAAUC,EAAQ,WAAY5G,EAAO,QAC1H2G,GAAkB,GAAT9D,EACT6D,GAAkB7D,EAElBqC,GAAU4B,IAKJA,EAAO,oBAAsB,GAAIjE,EAA1B,sBADb8D,EAAQN,GACgF,SAFxFO,GAAS,IAEiG,WAAY5G,EAAO,QAC7H2G,GAAkB,GAAT9D,EACT6D,EAAiB7D,EACjBqC,GAAU4B,GA7BtB,yBAgCW5B,GAhCX,6C,4EAqCe,WAAgBH,GAAhB,2FACED,EAASC,GADX,oF,sBA1EfpH,EAAQ,IAAUoJ,SA0EH,oD","file":"static/js/main.66e6394d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Instagram-Logo.wine.22bda4c2.svg\";","export default __webpack_public_path__ + \"static/media/nameless.fc3c7d9d.png\";","import { createTheme } from '@mui/material/styles';\n\n\nconst theme = createTheme({\n    palette: {\n      primary: {\n        main: '#EFEF85',\n      },\n      secondary: {\n        main: '#ff7961',\n      },\n    },\n  });\n\n\nexport default theme;","const RLEtoSVG = require('./RLEtoSVG').default;\n\n\nexport const mintNFT = async (nftSeeder, nftDescriptor, account) => {\n    console.log(\"in mintNFT code\")\n    await nftSeeder.generateSeed(nftDescriptor.address);\n    const wholeSeed = await nftSeeder.seeds(account);\n    const skin = await nftDescriptor.getSkin(wholeSeed.skin)\n    const skinPalette = await nftDescriptor.getSkinPalette(wholeSeed.skinPalette)\n    const head = await nftDescriptor.getHead(wholeSeed.head)\n    const headPalette = await nftDescriptor.getHeadPalette(wholeSeed.headPalette)\n    const jacket = await nftDescriptor.getJacket(wholeSeed.jacket)\n    const jacketPalette = await nftDescriptor.getJacketPalette(wholeSeed.jacketPalette)\n\n    const mySeed = {\n    skin: skin, \n    skinPalette: skinPalette,\n    jacket: jacket,\n    jacketPalette: jacketPalette,\n    head: head,\n    headPalette: headPalette\n    }\n\n    const url = await RLEtoSVG(mySeed);\n   \n    const txn = await nftDescriptor.makeAnEpicNFT(wholeSeed, url)\n    await txn.wait()\n    console.log(\"completed mint\")\n}\n\n\nexport default mintNFT","import '../styles/App.css';\nimport { ethers } from \"ethers\";\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport Stack from '@mui/material/Stack';\nimport { styled } from '@mui/material/styles';\nimport NYCDescriptor from '../utils/NYCDescriptor.json';\nimport React, { useState } from \"react\";\n\nconst CONTRACT_DESCRIPTOR_ADDRESS = \"0x2AF31eA5DCA17f3AfC46f6AbEEB0532849aa4EC5\";\nconst Item = styled(Paper)(({ theme }) => ({\n  backgroundColor: \"#000000\",\n  padding: theme.spacing(1),\n  textAlign: 'center',\n  color: '#EFEF85',\n  fontFamily: \"myFont\"\n}));\n\nconst ComponentsBox = () => {\n\n  const [head, setHead] = useState(\"\");\n  const [skin, setSkin] = useState(\"\");\n  const [jacket, setJacket] = useState(\"\");\n\n  async function getColorCounts() {\n    const { ethereum } = window;\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const connectedDescriptorContract = new ethers.Contract(CONTRACT_DESCRIPTOR_ADDRESS, NYCDescriptor.abi, signer)\n      const skinCount = await connectedDescriptorContract.skinPaletteCount()\n      setSkin(skinCount.toNumber())\n      const jacketCount = await connectedDescriptorContract.jacketPaletteCount()\n      setJacket(jacketCount.toNumber())\n      const headCount = await connectedDescriptorContract.headPaletteCount()\n      setHead(headCount.toNumber())\n    }\n  } \n\n  getColorCounts()\n\n  return (\n    <Box sx = {{width: '20%'}}>\n      <Stack spacing={1}>\n        <Item>Head Colors: {head}</Item>\n        <Item>Jacket Colors: {jacket}</Item>\n        <Item>Skin Colors: {skin} </Item>\n      </Stack>\n    </Box>\n  );\n};\n\nexport default ComponentsBox;","import './styles/App.css';\nimport instalogo from './assets/Instagram-Logo.wine.svg'\nimport namelesslogo from './assets/nameless.png'\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\n//import myEpicNft from '.utils/NYCDescriptor.json'\nimport NYCDescriptor from './utils/NYCDescriptor.json';\nimport NYCSeeder from './utils/NYCSeeder.json';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport theme from './styles/colorsTheme'\nimport { ThemeProvider } from '@mui/material/styles';\nimport Alert from '@mui/material/Alert';\nimport {mintNFT} from './functionality/SeedAndMint';\nimport Grid from './components/ComponentsBox';\n\nconst TWITTER_HANDLE = 'namelessyouthclub';\nconst TWITTER_LINK = `https://instagram.com/${TWITTER_HANDLE}`;\n// const OPENSEA_LINK = '';\n// const TOTAL_MINT_COUNT = 50;\n\n// I moved the contract address to the top for easy access.\nconst CONTRACT_SEEDER_ADDRESS = \"0x5e18eee72D1c10A65739d008FbcFfa8Dd8aA8dFA\";\nconst CONTRACT_DESCRIPTOR_ADDRESS = \"0x2AF31eA5DCA17f3AfC46f6AbEEB0532849aa4EC5\";\n\nconst App = () => {\n\n    const [currentAccount, setCurrentAccount] = useState(\"\");\n    const [myAlert, setAlert] = useState()\n    const [loading, setLoading] = useState(false);\n    \n    const checkIfWalletIsConnected = async () => {\n      const { ethereum } = window;\n      if (!ethereum) {\n          console.log(\"Make sure you have metamask!\");\n          return;\n      } else {\n          console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n      let chainId = await ethereum.request({ method: 'eth_chainId' });\n      const rinkebyChainId = \"0x4\"; \n\n      if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log(\"Found an authorized account:\", account);\n          if (chainId !== rinkebyChainId) {\n            alert(\"You are not connected to the Rinkeby Test Network!\");\n          }\n          else {\n            setCurrentAccount(account)\n            setupEventListener()\n          }\n\t\t\t\t\t\n      } else {\n          console.log(\"No authorized account found\")\n      }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n      setupEventListener() \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedDescriptorContract = new ethers.Contract(CONTRACT_DESCRIPTOR_ADDRESS, NYCDescriptor.abi, signer)\n\n       // event if minted is completed\n        connectedDescriptorContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n          setLoading(false)\n          //alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_DESCRIPTOR_ADDRESS}/${tokenId.toNumber()}`)\n          setAlert(<Alert onClose={() => {setAlert(\"\")}} severity=\"success\">NFT minted — check it out:  https://testnets.opensea.io/assets/{CONTRACT_DESCRIPTOR_ADDRESS}/{tokenId.toNumber()}</Alert>)\n        });\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const askContractToMintNft = async () => {\n    // try {\n      const { ethereum } = window;\n      setLoading(true)\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        console.log(signer)\n        const connectedSeederContract = new ethers.Contract(CONTRACT_SEEDER_ADDRESS, NYCSeeder.abi, signer);\n        const connectedDescriptorContract = new ethers.Contract(CONTRACT_DESCRIPTOR_ADDRESS, NYCDescriptor.abi, signer)\n\n        await mintNFT(connectedSeederContract, connectedDescriptorContract, currentAccount)\n            .catch((err)=>{\n              console.log(err)\n              setLoading(false);\n              setAlert(<Alert onClose={() => {setAlert(\"\")}} severity=\"error\">\n                        <strong>Error: </strong>Transaction Rejected\n                      </Alert>)\n              })\n        \n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n  }\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  function isLoading() {\n    const isLoading = loading;\n    if (isLoading) {\n      return <ThemeProvider theme={theme} ><div className='center'> <LinearProgress className = \"spinner\" color= \"primary\" />  </div></ThemeProvider>\n    }\n    return <button onClick={askContractToMintNft} className=\"cta-button mint-button\">\n         Mint NFT\n       </button> ;\n  }\n  \n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <div className = \"alert\">{myAlert}</div>\n        <div className=\"container\">\n        \n          <div className=\"header-container\">\n            <img alt = \"nameless-logo\" src = {namelesslogo} />\n            <h1 className=\"sub-text\">ideas unmasked</h1>\n            {currentAccount === \"\" ? renderNotConnectedContainer() : isLoading()}\n          </div>\n          <div className='components-container'>\n          {currentAccount === \"\" ? <></> : <Grid />  }\n          </div>\n          <div className=\"footer-container\">\n            <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={instalogo} />\n            <a\n              className=\"footer-text\"\n              href={TWITTER_LINK}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >{`@${TWITTER_HANDLE}`}</a>\n          </div>\n        </div>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { ethers } from \"ethers\";\n\nrequire('dotenv').config()\n\nasync function writeSVG(seed) {\n    const header = '<svg width=\"780\" height=\"1040\" viewbox =\"0,0,780,1040\" xmlns=\"http://www.w3.org/2000/svg\" shape-rendering=\"crispEdges\">\\n<rect width = \"780\" height = \"1040\" fill = \"#000000\"/>'\n    const filename = \"./imageSVG.svg\"\n    //const filename = path.normalize(__dirname + \"/svgText.svg\")\n    let finalURL = \"\"\n    let svgTxt = \"\"\n    svgTxt += header\n\n    svgTxt += await createRects(seed.skin, seed.skinPalette, filename)\n    svgTxt += await createRects(seed.jacket, seed.jacketPalette, filename)\n    svgTxt += await createRects(seed.head, seed.headPalette, filename)\n    svgTxt += \"</svg>\"\n\n    const data = {\n        \"data\" : svgTxt\n    }\n\n    let url = \"\"\n    if (window.location.hostname === \"localhost\")\n        url = \"http://localhost:3001/handle\"\n    else\n        url = \"https://nyc-splash-page.herokuapp.com/handle\"\n        \n    await fetch(url, {\n          method: 'POST',\n          mode: 'cors',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: (JSON.stringify(data))\n    }).then(res => \n        res.json()).then(json => finalURL = json.pinata)\n    return finalURL\n}\n\nasync function createRects(component, componentPalette, filename) {\n    let svgTxt = \"\"\n    let yStart = ethers.BigNumber.from(component[0]).toNumber()\n    let xStart = ethers.BigNumber.from(component[3]).toNumber()\n    let xEnd = ethers.BigNumber.from(component[1]).toNumber()\n    let totalWidth = xEnd - xStart  //480 24 wide    \n    let totalWidthBlocks = totalWidth / 20\n    totalWidthBlocks = Math.ceil(totalWidthBlocks)\n    let currBlockCount = 0\n    let currX = xStart\n    let currY = yStart\n    for (let i = 4; i < component[\"length\"] - 2; i += 2) {\n         let length =  ethers.BigNumber.from(component[i]).toNumber()\n         let color = componentPalette[component[i + 1]]\n         let testX = currBlockCount + length\n\n        if (testX <= totalWidthBlocks) {\n            const line = '<rect width=\"'+ (20 * length)+'\" height= \"' + (20) +'\" x=\"' + (currX)+ '\" y=\"'+ (currY)+ '\" fill=\"'+ color +'\"/>\\n'\n            currX += length * 20\n            currBlockCount += length\n\n            svgTxt += line\n        }\n        else {\n            currY += 20\n            currX = xStart\n            const line = '\\n\\n<rect width=\"'+ (20* length)+'\" height= \"' + (20) +'\" x=\"' + (currX)+ '\" y=\"'+ (currY)+ '\" fill=\"'+ color +'\"/>\\n'\n            currX += length * 20\n            currBlockCount = length ;\n            svgTxt += line\n        }\n    }\n    return svgTxt\n}\n\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default async function (seed) { \n    return await writeSVG(seed);\n};"],"sourceRoot":""}