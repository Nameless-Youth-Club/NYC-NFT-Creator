{"version":3,"sources":["assets/Instagram-Logo.wine.svg","assets/nameless.png","styles/colorsTheme.js","App.js","index.js","functionality/SeedAndMint.js","functionality/RLEtoSVG.js"],"names":["theme","createTheme","palette","primary","main","secondary","mintMyNFT","require","TWITTER_HANDLE","TWITTER_LINK","CONTRACT_DESCRIPTOR_ADDRESS","App","useState","currentAccount","setCurrentAccount","myAlert","setAlert","loading","setLoading","checkIfWalletIsConnected","window","ethereum","console","log","request","method","accounts","chainId","length","account","alert","setupEventListener","connectWallet","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","NYCDescriptor","abi","on","from","tokenId","toNumber","Alert","onClose","severity","error","askContractToMintNft","connectedSeederContract","NYCSeeder","connectedDescriptorContract","catch","err","useEffect","ThemeProvider","className","alt","src","namelesslogo","onClick","LinearProgress","color","instalogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById","RLEtoSVG","default","mintNFT","nftSeeder","nftDescriptor","generateSeed","address","seeds","wholeSeed","getSkin","skin","getSkinPalette","skinPalette","getHead","head","getHeadPalette","headPalette","getJacket","jacket","getJacketPalette","jacketPalette","mySeed","url","makeAnEpicNFT","txn","wait","module","exports","seeder","desciptor","writeSVG","seed","filename","finalURL","svgTxt","createRects","data","fetch","mode","headers","body","JSON","stringify","then","res","json","pinata","component","componentPalette","yStart","BigNumber","xStart","xEnd","totalWidthBlocks","Math","ceil","currBlockCount","currX","currY","i","line","config"],"mappings":"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","file":"static/js/main.44489f73.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Instagram-Logo.wine.22bda4c2.svg\";","export default __webpack_public_path__ + \"static/media/nameless.fc3c7d9d.png\";","import { createTheme } from '@mui/material/styles';\n\n\nconst theme = createTheme({\n    palette: {\n      primary: {\n        main: '#EFEF85',\n      },\n      secondary: {\n        main: '#ff7961',\n      },\n    },\n  });\n\n\nexport default theme;","import './styles/App.css';\nimport instalogo from './assets/Instagram-Logo.wine.svg'\nimport namelesslogo from './assets/nameless.png'\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\n//import myEpicNft from '.utils/NYCDescriptor.json'\nimport NYCDescriptor from './utils/NYCDescriptor.json';\nimport NYCSeeder from './utils/NYCSeeder.json';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport theme from './styles/colorsTheme'\nimport { ThemeProvider } from '@mui/material/styles';\nimport Alert from '@mui/material/Alert';\nconst mintMyNFT = require('./functionality/SeedAndMint');\n\nconst TWITTER_HANDLE = 'namelessyouthclub';\nconst TWITTER_LINK = `https://instagram.com/${TWITTER_HANDLE}`;\n// const OPENSEA_LINK = '';\n// const TOTAL_MINT_COUNT = 50;\n\n// I moved the contract address to the top for easy access.\nconst CONTRACT_SEEDER_ADDRESS = \"0x5e18eee72D1c10A65739d008FbcFfa8Dd8aA8dFA\";\nconst CONTRACT_DESCRIPTOR_ADDRESS = \"0x2AF31eA5DCA17f3AfC46f6AbEEB0532849aa4EC5\";\n\nconst App = () => {\n\n    const [currentAccount, setCurrentAccount] = useState(\"\");\n    const [myAlert, setAlert] = useState()\n    const [loading, setLoading] = useState(false);\n    \n    const checkIfWalletIsConnected = async () => {\n      const { ethereum } = window;\n      if (!ethereum) {\n          console.log(\"Make sure you have metamask!\");\n          return;\n      } else {\n          console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n      let chainId = await ethereum.request({ method: 'eth_chainId' });\n      const rinkebyChainId = \"0x4\"; \n\n      if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log(\"Found an authorized account:\", account);\n          if (chainId !== rinkebyChainId) {\n            alert(\"You are not connected to the Rinkeby Test Network!\");\n          }\n          else {\n            setCurrentAccount(account)\n            setupEventListener()\n          }\n\t\t\t\t\t\n      } else {\n          console.log(\"No authorized account found\")\n      }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n      setupEventListener() \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedDescriptorContract = new ethers.Contract(CONTRACT_DESCRIPTOR_ADDRESS, NYCDescriptor.abi, signer)\n\n       // event if minted is completed\n        connectedDescriptorContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n          setLoading(false)\n          //alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_DESCRIPTOR_ADDRESS}/${tokenId.toNumber()}`)\n          setAlert(<Alert onClose={() => {setAlert(\"\")}} severity=\"success\">NFT minted — check it out:  https://testnets.opensea.io/assets/{CONTRACT_DESCRIPTOR_ADDRESS}/{tokenId.toNumber()}</Alert>)\n        });\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const askContractToMintNft = async () => {\n    // try {\n      const { ethereum } = window;\n      setLoading(true)\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        console.log(signer)\n        const connectedSeederContract = new ethers.Contract(CONTRACT_SEEDER_ADDRESS, NYCSeeder.abi, signer);\n        const connectedDescriptorContract = new ethers.Contract(CONTRACT_DESCRIPTOR_ADDRESS, NYCDescriptor.abi, signer)\n\n        await mintMyNFT(connectedSeederContract, connectedDescriptorContract, currentAccount)\n            .catch((err)=>{\n              setLoading(false);\n              setAlert(<Alert onClose={() => {setAlert(\"\")}} severity=\"error\">\n                        <strong>Error: </strong>Transaction Rejected\n                      </Alert>)\n              })\n        \n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n  }\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  function isLoading() {\n    const isLoading = loading;\n    if (isLoading) {\n      return <ThemeProvider theme={theme} ><div className='center'> <LinearProgress className = \"spinner\" color= \"primary\" />  </div></ThemeProvider>\n    }\n    return <button onClick={askContractToMintNft} className=\"cta-button mint-button\">\n         Mint NFT\n       </button> ;\n  }\n  \n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <div className = \"alert\">{myAlert}</div>\n        <div className=\"container\">\n        \n          <div className=\"header-container\">\n            <img alt = \"nameless-logo\" src = {namelesslogo} />\n            {/* <p className=\"header gradient-text\">namelessyouthclub</p> */}\n            <p className=\"sub-text\">\n              ideas unmasked\n            </p>\n            {currentAccount === \"\" ? renderNotConnectedContainer() : isLoading()}\n          </div>\n          <div className=\"footer-container\">\n            <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={instalogo} />\n            <a\n              className=\"footer-text\"\n              href={TWITTER_LINK}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >{`@${TWITTER_HANDLE}`}</a>\n          </div>\n        </div>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","const RLEtoSVG = require('./RLEtoSVG').default;\n\n\nasync function mintNFT(nftSeeder, nftDescriptor, account) {\n    console.log(\"in mintNFT code\")\n    await nftSeeder.generateSeed(nftDescriptor.address);\n    const wholeSeed = await nftSeeder.seeds(account);\n    const skin = await nftDescriptor.getSkin(wholeSeed.skin)\n    const skinPalette = await nftDescriptor.getSkinPalette(wholeSeed.skinPalette)\n    const head = await nftDescriptor.getHead(wholeSeed.head)\n    const headPalette = await nftDescriptor.getHeadPalette(wholeSeed.headPalette)\n    const jacket = await nftDescriptor.getJacket(wholeSeed.jacket)\n    const jacketPalette = await nftDescriptor.getJacketPalette(wholeSeed.jacketPalette)\n\n    const mySeed = {\n    skin: skin, \n    skinPalette: skinPalette,\n    jacket: jacket,\n    jacketPalette: jacketPalette,\n    head: head,\n    headPalette: headPalette\n    }\n\n    const url = await RLEtoSVG(mySeed);\n   \n    const txn = await nftDescriptor.makeAnEpicNFT(wholeSeed, url)\n    await txn.wait()\n    console.log(\"completed mint\")\n}\n\n\nmodule.exports = async function (seeder, desciptor, account) { \n    return await mintNFT(seeder, desciptor, account);\n};","import { ethers } from \"ethers\";\nrequire('dotenv').config()\n\nasync function writeSVG(seed) {\n    const header = '<svg width=\"780\" height=\"1040\" viewbox =\"0,0,780,1040\" xmlns=\"http://www.w3.org/2000/svg\" shape-rendering=\"crispEdges\">\\n<rect width = \"780\" height = \"1040\" fill = \"#000000\"/>'\n    const filename = \"./imageSVG.svg\"\n    //const filename = path.normalize(__dirname + \"/svgText.svg\")\n    let finalURL = \"\"\n    let svgTxt = \"\"\n    svgTxt += header\n\n    svgTxt += await createRects(seed.skin, seed.skinPalette, filename)\n    svgTxt += await createRects(seed.jacket, seed.jacketPalette, filename)\n    svgTxt += await createRects(seed.head, seed.headPalette, filename)\n    svgTxt += \"</svg>\"\n\n    const data = {\n        \"data\" : svgTxt\n    }\n    await fetch(\"http://localhost:3001/handle\", {\n          method: 'POST',\n          mode: 'cors',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: (JSON.stringify(data))\n    }).then(res => res.json()).then(json => finalURL = json.pinata)\n    return finalURL\n}\n\nasync function createRects(component, componentPalette, filename) {\n    let svgTxt = \"\"\n    let yStart = ethers.BigNumber.from(component[0]).toNumber()\n    let xStart = ethers.BigNumber.from(component[3]).toNumber()\n    let xEnd = ethers.BigNumber.from(component[1]).toNumber()\n    let totalWidth = xEnd - xStart  //480 24 wide    \n    let totalWidthBlocks = totalWidth / 20\n    totalWidthBlocks = Math.ceil(totalWidthBlocks)\n    let currBlockCount = 0\n    let currX = xStart\n    let currY = yStart\n    for (let i = 4; i < component[\"length\"] - 2; i += 2) {\n         let length =  ethers.BigNumber.from(component[i]).toNumber()\n         let color = componentPalette[component[i + 1]]\n         let testX = currBlockCount + length\n\n        if (testX <= totalWidthBlocks) {\n            const line = '<rect width=\"'+ (20 * length)+'\" height= \"' + (20) +'\" x=\"' + (currX)+ '\" y=\"'+ (currY)+ '\" fill=\"'+ color +'\"/>\\n'\n            currX += length * 20\n            currBlockCount += length\n\n            svgTxt += line\n        }\n        else {\n            currY += 20\n            currX = xStart\n            const line = '\\n\\n<rect width=\"'+ (20* length)+'\" height= \"' + (20) +'\" x=\"' + (currX)+ '\" y=\"'+ (currY)+ '\" fill=\"'+ color +'\"/>\\n'\n            currX += length * 20\n            currBlockCount = length ;\n\n            svgTxt += line\n        }\n    }\n    return svgTxt\n}\n\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default async function (seed) { \n    return await writeSVG(seed);\n};"],"sourceRoot":""}